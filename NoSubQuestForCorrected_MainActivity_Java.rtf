{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil Courier New;}{\f1\fnil\fcharset136 PMingLiU;}{\f2\fnil\fcharset0 PMingLiU;}}
{\colortbl ;\red204\green120\blue50;\red169\green183\blue198;\red152\green118\blue170;\red104\green151\blue187;\red128\green128\blue128;\red106\green135\blue89;\red187\green181\blue41;\red255\green198\blue109;\red0\green0\blue255;}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf1\f0\fs10\lang1028 package \cf2 com.education.samson.linear3\cf1 ;\line\line import \cf2 android.content.Intent\cf1 ;\line import \cf2 android.provider.Settings.Secure\cf1 ;\line import \cf2 android.net.Uri\cf1 ;\line import \cf2 android.media.MediaPlayer\cf1 ;\line import \cf2 android.os.Handler\cf1 ;\line import \cf2 android.support.v7.app.AppCompatActivity\cf1 ;\line import \cf2 android.os.Bundle\cf1 ;\line import \cf2 android.view.View\cf1 ;\line import \cf2 android.view.animation.Animation\cf1 ;\line import \cf2 android.view.animation.AnimationUtils\cf1 ;\line import \cf2 android.widget.ImageView\cf1 ;\line import \cf2 android.widget.LinearLayout\cf1 ;\line import \cf2 android.widget.TextView\cf1 ;\line\line import \cf2 java.io.IOException\cf1 ;\line import \cf2 java.util.Arrays\cf1 ;\line\line public class \cf2 MainActivity \cf1 extends \cf2 AppCompatActivity \{\line\line     \cf1 public static final int \cf3\i totalQuest \cf2\i0 = \cf4 23\cf1 ; \cf5 //number of questions\line     \cf1 int \cf3 questCount \cf2 = \cf4 0\cf1 ; \cf5 //count the question\line     \cf1 int \cf3 questSubcount \cf2 = \cf4 0\cf1 ; \cf5 //count the times of doing similar questions\line     \cf1 int \cf3 pagePassword \cf2 = \cf4 2\cf1 ; \cf5 //page that requires password\line     \cf1 int \cf3 falseInSubQuest \cf2 = \cf4 0\cf1 ; \cf5 //times of false in a question\line     \cf1 int \cf3 answered \cf2 = \cf4 0\cf1 ; \cf5 //answered a MC already? Yes-1, No-0\line     \cf1 int \cf3 labelTag \cf2 = \cf4 0\cf1 ; \cf5 //to recognize which label is pressed\line     \cf1 int \cf3 viewTag \cf2 = \cf4 0\cf1 ; \cf5 //to recognize which view is pressed\line     \cf1 int \cf3 thisIsCorrect \cf2 = \cf4 0\cf1 ;\cf5 //to record the question is correctly answered\line     \cf1 int\cf2 [] \cf3 oldScore \cf2 = \{\cf4 0\cf1 , \cf4 0\cf1 , \cf4 0\cf2\}\cf1 ;\cf5 //start of the animation of score increase\line     \cf1 int\cf2 [] \cf3 newScore \cf2 = \{\cf4 0\cf1 , \cf4 0\cf1 , \cf4 0\cf2\}\cf1 ; \cf5 //end of the animation of score increase\line     \cf1 int \cf3 currentScore \cf2 = \cf4 0\cf1 ; \cf5 //current score of the animation of score increase\line     \cf1 int \cf3 digit \cf2 = \cf4 0\cf1 ; \cf5 //which digit animating\line     \cf1 int \cf3 woodenWholeDigit \cf2 = \cf4 0\cf1 ; \cf5 //number of digits of whole number\line     \cf1 double \cf3 woodenWholeLastValue \cf2 = \cf4 1.0\cf1 ; \cf5 //the value of last digit of whole number\line     \cf1 int \cf3 woodenWholeDecNum \cf2 = -\cf4 1\cf1 ; \cf5 //number of decimals of whole number\line     \cf1 double\cf2 [] \cf3 woodenValue \cf2 = \{\cf4 0.0\cf1 , \cf4 0.0\cf1 , \cf4 0.0\cf2\}\cf1 ;\cf5 //initialize the values of answer fraction\line     \cf1 int \cf3 woodenChosen \cf2 = \cf4 3\cf1 ;\cf5 //which wooden board the user is inputing[0, 1, 2], 3 means not choose yet\line     \cf1 int \cf3 buttonPressed \cf2 = \cf4 0\cf1 ; \cf5 //the R.id of the button pressed\line     \cf1 int \cf3 buttonIndex \cf2 = -\cf4 1\cf1 ; \cf5 //the index of the button pressed in the array\line     \cf1 int \cf3 ansFormat \cf2 = \cf4 1\cf1 ; \cf5 //0 for MC, 1 for fill in the blank\line     \cf1 int \cf3 ID \cf2 = \cf4 0\cf1 ; \cf5 //create App ID by class + random number\line     \cf1 double \cf3 password \cf2 = \cf4 0\cf1 ; \cf5 //calculated password\line     \cf1 int\cf2 [] \cf3 passDigit \cf2 = \{\cf4 0\cf1 , \cf4 0\cf1 , \cf4 0\cf1 , \cf4 0\cf1 , \cf4 0\cf1 , \cf4 0\cf2\}\cf1 ; \cf5 //digit array for calculating the password\line     \cf2 String \cf3 responseFile \cf2 = \cf6 ""\cf1 ; \cf5 //file name of audio of response\line     \cf1 int \cf3 maxCount \cf2 = \cf4 9\cf1 ;    \cf5 //Maximum Count to which label will be Updated\line     \cf1 int \cf3 currentCount \cf2 = \cf4 0\cf1 ;     \cf5 // Count which is currently displayed in Label\line     \cf1 int \cf3 form \cf2 = \cf4 5\cf1 ; \cf5 //exercise for class 5 2nd term\line     \cf1 int \cf3 term \cf2 = \cf4 2\cf1 ; \cf5 //exercise for class 5 2nd term\line     \cf2 Handler \cf3 handler\cf1 ; \cf5 //more stable than timer to repeat the action of increasing score\line     \cf2 Runnable \cf3 periodicUpdate\cf1 ; \cf5 //the runnable function of the action of increasing score\line     \cf1 boolean \cf3 Continue \cf2 = \cf1 false; \cf5 //Is periodicUpdate continue?\line\line     \cf1 private static final int\cf2 [] \cf3\i BUTTON_IDS \cf2\i0 = \{\line             R.id.\cf3\i Image110\cf1\i0 , \cf2 R.id.\cf3\i Image111\cf1\i0 , \cf2 R.id.\cf3\i MImage112\cf1\i0 , \cf2 R.id.\cf3\i MImage113\cf1\i0 , \cf2 R.id.\cf3\i OOkButton\cf1\i0 , \cf2 R.id.\cf3\i RRestart\line     \cf2\i0\}\cf1 ; \cf5 //IDs of buttonMC x 4, OkButton and Restart button\line     \cf1 private static final int\cf2 [] \cf3\i BUTTON_Square \cf2\i0 = \{\line             R.id.\cf3\i S0\cf1\i0 , \cf2 R.id.\cf3\i S1\cf1\i0 , \cf2 R.id.\cf3\i S2\cf1\i0 , \cf2 R.id.\cf3\i S3\cf1\i0 , \cf2 R.id.\cf3\i S4\cf1\i0 , \cf2 R.id.\cf3\i S5\cf1\i0 ,\line             \cf2 R.id.\cf3\i S6\cf1\i0 , \cf2 R.id.\cf3\i S7\cf1\i0 , \cf2 R.id.\cf3\i S8\cf1\i0 , \cf2 R.id.\cf3\i S9\cf1\i0 , \cf2 R.id.\cf3\i Square10\cf1\i0 , \cf2 R.id.\cf3\i SquareBackButton\line     \cf2\i0\}\cf1 ; \cf5 //IDs of 11 small square buttons\line     \cf1 private static final int\cf2 [] \cf3\i BUTTON_Wooden \cf2\i0 = \{\line             R.id.\cf3\i wooden0\cf1\i0 , \cf2 R.id.\cf3\i wooden1\cf1\i0 , \cf2 R.id.\cf3\i wooden2\line     \cf2\i0\}\cf1 ;\cf5 //IDs of 3 wooden board textViews\line     \cf1 private static final int\cf2 [] \cf3\i MCColorID \cf2\i0 = \{\line             R.id.\cf3\i LinearLayout110\cf1\i0 , \cf2 R.id.\cf3\i LinearLayout111\cf1\i0 , \cf2 R.id.\cf3\i LinearLayout112\cf1\i0 , \cf2 R.id.\cf3\i LinearLayout113\line     \cf2\i0\}\cf1 ; \cf5 //IDs of 4 buttonMC background for changing button colors\line\line     \cf2 TextView[] \cf3 woodenNumber\cf1 ; \cf5 //wooden board textView for changing the number\line     \cf2 TextView[] \cf3 score\cf1 ; \cf5 //textView to display the score\line     \cf2 ImageView[] \cf3 buttonsMC \cf2 = \cf1 new \cf2 ImageView[\cf4 4\cf2 ]\cf1 ; \cf5 //answer buttons for MC\line     \cf2 ImageView \cf3 fillInBlank\cf1 ; \cf5 //blue button view for fill in blank\line     \cf2 LinearLayout[] \cf3 MCButtonColor \cf2 = \cf1 new \cf2 LinearLayout[\cf4 4\cf2 ]\cf1 ;\cf5 //color buttons for MC\line     \cf2 TextView \cf3 OkButton\cf1 ; \cf5 //Ok button textView for changing the text\line     \cf2 TextView \cf3 restartButton\cf1 ; \cf5 //Restart button\line     \cf2 ImageView \cf3 responseView\cf1 ; \cf5 //to display response png\line     \cf2 ImageView \cf3 questionView\cf1 ; \cf5 //to display question png\line     \cf2 ImageView \cf3 shiningStar1\cf1 ; \cf5 //for the animation of a shining star to get the attention on the question\line     \cf2 ImageView \cf3 shiningStar2\cf1 ; \cf5 //for the animation of a shining star to get the attention on the response\line     \cf2 TextView \cf3 decimalView\cf1 ; \cf5 //square to display "."\line     \cf2 TextView \cf3 textID\cf1 ; \cf5 //to display user ID on the right bottom corner\line     \cf2 TextView \cf3 textGood\cf1 ; \cf5 // for the animation of the GOOD message\line     \cf2 TextView \cf3 textTry\cf1 ; \cf5 //for the animation of the TRY AGAIN message\line     \cf2 LinearLayout \cf3 layoutMC1\cf1 ; \cf5 //1st row of MC for switch between MC and fill in blanks\line     \cf2 LinearLayout \cf3 layoutMC2\cf1 ; \cf5 //2nd row of MC for switch between MC and fill in blanks\line     \cf2 LinearLayout \cf3 layoutWooden\cf1 ; \cf5 //row of wooden boards for switch between MC and fill in blanks\line     \cf2 LinearLayout \cf3 layoutFraction\cf1 ; \cf5 // layout to display fraction and its visibility\line     \cf2 LinearLayout \cf3 layoutSquare\cf1 ; \cf5 //row of small squares for switch between MC and fill in blanks\line     \cf2 MediaPlayer \cf3 click\cf1 ; \cf5 //for Ok button\line     \cf2 MediaPlayer \cf3 clap\cf1 ; \cf5 //for correct answer\line     \cf2 MediaPlayer \cf3 ding\cf1 ; \cf5 //for displaying response\line     \cf2 MediaPlayer \cf3 chimes\cf1 ; \cf5 //2nd choice for correct answer\line     \cf2 MediaPlayer \cf3 responsePlayer\cf1 ; \cf5 //player for playing the response audio\line\line     \cf7 @Override\line     \cf1 protected void \cf8 onCreate\cf2 (Bundle savedInstanceState) \{\line         \cf1 super\cf2 .onCreate(savedInstanceState)\cf1 ;\line         \cf2 setContentView(R.layout.\cf3\i activity_main\cf2\i0 )\cf1 ;\line         \cf5 //setup the players with audios\line         \cf3 chimes \cf2 = MediaPlayer.\i create\i0 (\cf1 this, \cf2 R.raw.\cf3\i chimes\cf2\i0 )\cf1 ;\line         \cf3 clap \cf2 = MediaPlayer.\i create\i0 (\cf1 this, \cf2 R.raw.\cf3\i clap\cf2\i0 )\cf1 ;\line         \cf3 ding \cf2 = MediaPlayer.\i create\i0 (\cf1 this, \cf2 R.raw.\cf3\i ding\cf2\i0 )\cf1 ;\line         \cf3 click \cf2 = MediaPlayer.\i create\i0 (\cf1 this, \cf2 R.raw.\cf3\i click\cf2\i0 )\cf1 ;\line\line         \cf5 //match ID in .xml\line         \cf3 responseView \cf2 = (ImageView) findViewById(R.id.\cf3\i Response\cf2\i0 )\cf1 ;\line         \cf3 layoutSquare \cf2 = (LinearLayout) findViewById(R.id.\cf3\i LinearLayout1_3\cf2\i0 )\cf1 ;\line         \cf3 woodenNumber \cf2 = \cf1 new \cf2 TextView[\cf3\i BUTTON_Wooden\cf2\i0 .\cf3 length\cf2 ]\cf1 ;\line         \cf3 buttonsMC \cf2 = \cf1 new \cf2 ImageView[\cf3\i BUTTON_IDS\cf2\i0 .\cf3 length \cf2 - \cf4 2\cf2 ]\cf1 ;\line         \cf3 score \cf2 = \cf1 new \cf2 TextView[\cf4 3\cf2 ]\cf1 ;\line         \cf3 score\cf2 [\cf4 0\cf2 ] = (TextView) findViewById(R.id.\cf3\i Coin0\cf2\i0 )\cf1 ;\line         \cf3 score\cf2 [\cf4 1\cf2 ] = (TextView) findViewById(R.id.\cf3\i Coin1\cf2\i0 )\cf1 ;\line         \cf3 score\cf2 [\cf4 2\cf2 ] = (TextView) findViewById(R.id.\cf3\i Coin2\cf2\i0 )\cf1 ;\line         \cf3 fillInBlank \cf2 = (ImageView) findViewById(R.id.\cf3\i Image120\cf2\i0 )\cf1 ;\line         \cf3 responseView \cf2 = (ImageView) findViewById(R.id.\cf3\i Response\cf2\i0 )\cf1 ;\line         \cf3 questionView \cf2 = (ImageView) findViewById(R.id.\cf3\i Image0\cf2\i0 )\cf1 ;\line         \cf3 shiningStar1 \cf2 = (ImageView) findViewById(R.id.\cf3\i shiningstar1\cf2\i0 )\cf1 ;\line         \cf3 shiningStar2 \cf2 = (ImageView) findViewById(R.id.\cf3\i shiningstar2\cf2\i0 )\cf1 ;\line         \cf3 textID \cf2 = (TextView) findViewById(R.id.\cf3\i TextID\cf2\i0 )\cf1 ;\line         \cf3 textGood \cf2 = (TextView) findViewById(R.id.\cf3\i GoodLabel\cf2\i0 )\cf1 ;\line         \cf3 textTry \cf2 = (TextView) findViewById(R.id.\cf3\i TryLabel\cf2\i0 )\cf1 ;\line         \cf3 layoutMC1 \cf2 = (LinearLayout) findViewById(R.id.\cf3\i LinearLayout1_1_0\cf2\i0 )\cf1 ;\line         \cf3 layoutMC2 \cf2 = (LinearLayout) findViewById(R.id.\cf3\i LinearLayout1_1_1\cf2\i0 )\cf1 ;\line         \cf3 layoutWooden \cf2 = (LinearLayout) findViewById(R.id.\cf3\i LinearLayout1_2\cf2\i0 )\cf1 ;\line         \cf3 layoutFraction \cf2 = (LinearLayout) findViewById(R.id.\cf3\i LinearLayoutFraction\cf2\i0 )\cf1 ;\line         \cf3 layoutSquare \cf2 = (LinearLayout) findViewById(R.id.\cf3\i LinearLayout1_3\cf2\i0 )\cf1 ;\line         \cf3 OkButton \cf2 = findViewById(\cf3\i BUTTON_IDS\cf2\i0 [\cf4 4\cf2 ])\cf1 ;\line         \cf3 restartButton \cf2 = findViewById(\cf3\i BUTTON_IDS\cf2\i0 [\cf4 5\cf2 ])\cf1 ;\line         \cf3 decimalView \cf2 = (TextView) findViewById(R.id.\cf3\i Square10\cf2\i0 )\cf1 ;\line         \cf3 handler \cf2 = \cf1 new \cf2 Handler()\cf1 ; \cf5 //used as timer\line\line\line         //get ANDROID_ID that does not need permission\line         \cf2 String androidId = Secure.\i getString\i0 (getContentResolver()\cf1 , \cf2 Secure.\cf3\i ANDROID_ID\cf2\i0 )\cf1 ;\line         \cf5 //use last hex digits only\line         \cf1 int \cf2 androidIdInt = Integer.\i parseInt\i0 (androidId.substring(androidId.length() - \cf4 3\cf2 )\cf1 , \cf2 androidId.length())\cf1 ;\line         \cf5 //value between 0 and 4095. Put into 4 digits\line         \cf1 int \cf2 temp = androidIdInt\cf1 ;\line         int \cf2 d1 = (\cf1 int\cf2 )Math.\i floor\i0 (temp / \cf4 1000\cf2 )\cf1 ;\line         \cf2 temp = temp - d1 * \cf4 1000\cf1 ;\line         int \cf2 d2 = (\cf1 int\cf2 )Math.\i floor\i0 (temp/\cf4 100\cf2 )\cf1 ;\line         \cf2 temp = temp - d2 * \cf4 100\cf1 ;\line         int \cf2 d3 = (\cf1 int\cf2 )Math.\i floor\i0 (temp/\cf4 10\cf2 )\cf1 ;\line         int \cf2 d4 = temp - d3 * \cf4 10\cf1 ;\line         \cf5 //calculate ID with form, term and androidIDInt\line         \cf3 ID \cf2 = (\cf1 int\cf2 )((\cf3 form \cf2 * \cf4 10 \cf2 + \cf3 term\cf2 ) * \cf4 10000 \cf2 + androidIdInt + Math.\i abs\i0 (\cf3 term \cf2 * \cf4 3 \cf2 - d1) * \cf4 197 \cf2 + Math.\i pow\i0 ((\cf3 term \cf2 * \cf4 4\cf2 ) - d3\cf1 , \cf4 2\cf2 ) * \cf4 13 \cf2 + Math.\i pow\i0 (\cf3 form \cf2 - d2\cf1 , \cf4 2\cf2 ) * \cf4 11 \cf2 + Math.\i abs\i0 (\cf3 form \cf2 - d4) * \cf4 119\cf2 )\cf1 ;\line         \cf5 //put ID into 6 digits\line         \cf1 int \cf2 IDTemp = \cf3 ID\cf1 ;\line         int \cf2 tens = \cf4 100000\cf1 ;\line         for \cf2 (\cf1 int \cf2 i = \cf4 0\cf1 ; \cf2 i < \cf4 6\cf1 ; \cf2 i++) \{\line             \cf3 passDigit\cf2 [i] = (\cf1 int\cf2 ) (IDTemp / tens)\cf1 ;\line             \cf2 IDTemp -= \cf3 passDigit\cf2 [i] * tens\cf1 ;\line             \cf2 tens = tens / \cf4 10\cf1 ;\line         \cf2\}\line         \cf5 //calculate the password with 6 digits\line         \cf3 password \cf2 = Math.\i pow\i0 (\cf3 passDigit\cf2 [\cf4 0\cf2 ]\cf1 , \cf4 3\cf2 ) * \cf4 17 \cf2 + Math.\i pow\i0 (\cf3 passDigit\cf2 [\cf4 1\cf2 ]\cf1 , \cf4 2\cf2 ) * \cf4 173 \cf2 + Math.\i pow\i0 (\cf3 passDigit\cf2 [\cf4 2\cf2 ]\cf1 , \cf4 3\cf2 ) * \cf4 83 \cf2 + Math.\i pow\i0 (\cf3 passDigit\cf2 [\cf4 3\cf2 ]\cf1 , \cf4 2\cf2 ) * \cf4 679 \cf2 + \cf3 passDigit\cf2 [\cf4 4\cf2 ] * \cf4 2989 \cf2 + Math.\i pow\i0 (\cf3 passDigit\cf2 [\cf4 5\cf2 ]\cf1 , \cf4 2\cf2 ) * \cf4 497\cf1 ;\line         \cf5 //display user ID\line         \cf3 textID\cf2 .setText(\cf6 "\f1\'bd\'d0\'a5\'fd\'ab\'f6\'a4\'40\'a4\'55\'a4\'ec\'aa\'4f\'a4\'7e\'ab\'f6\'bc\'c6\'a6\'72\'a1\'43\f0        ID=" \cf2 + String.\i valueOf\i0 (\cf3 ID\cf2 ))\cf1 ;\line         \cf5 //setup button Listener\line         \cf2 View.OnClickListener buttonListener = \cf1 new \cf2 View.OnClickListener()\{\line             \cf1 public void \cf8 onClick\cf2 (View v)\{\line                 \cf3 buttonPressed \cf2 = v.getId()\cf1 ;\line                 if \cf2 (Arrays.\i binarySearch\i0 (\cf3\i BUTTON_IDS\cf1\i0 , \cf3 buttonPressed\cf2 ) > -\cf4 1\cf2 ) \{\line                     \cf3 buttonIndex \cf2 = Arrays.\i binarySearch\i0 (\cf3\i BUTTON_IDS\cf1\i0 , \cf3 buttonPressed\cf2 )\cf1 ;\line                     \cf3 labelTag \cf2 = \cf3 buttonIndex\cf1 ;\line                     \cf2 Buttons()\cf1 ; \cf5 //action for buttonMC, Okbutton and Restart button\line                 \cf2\}\line                 \cf1 if \cf2 (Arrays.\i binarySearch\i0 (\cf3\i BUTTON_Square\cf1\i0 , \cf3 buttonPressed\cf2 ) > -\cf4 1\cf2 ) \{\line                     \cf3 buttonIndex \cf2 = Arrays.\i binarySearch\i0 (\cf3\i BUTTON_Square\cf1\i0 , \cf3 buttonPressed\cf2 )\cf1 ;\line                     \cf3 labelTag \cf2 = \cf3 buttonIndex\cf1 ;\line                     \cf2 Square()\cf1 ; \cf5 //action for small square buttons\line                 \cf2\}\line                 \cf1 if \cf2 (Arrays.\i binarySearch\i0 (\cf3\i BUTTON_Wooden\cf1\i0 , \cf3 buttonPressed\cf2 ) > -\cf4 1\cf2 ) \{\line                     \cf3 buttonIndex \cf2 = Arrays.\i binarySearch\i0 (\cf3\i BUTTON_Wooden\cf1\i0 , \cf3 buttonPressed\cf2 )\cf1 ;\line                     \cf3 labelTag \cf2 = \cf3 buttonIndex\cf1 ;\line                     \cf2 Wooden()\cf1 ; \cf5 //action for 3 wooden board\line                 \cf2\}\line                 \cf1 if \cf2 (\cf3 buttonPressed \cf2 == R.id.\cf3\i Response\cf2\i0 )\{\line                     \cf5 //action for pressing the hyperlink to Facebook\line                     \cf1 if \cf2 (\cf3 questCount \cf2 == \cf3 pagePassword\cf2 )\{\line                         String url = \cf6 "{{\field{\*\fldinst{HYPERLINK https://www.facebook.com/primarymathspaper/posts/2278450288879217 }}{\fldrslt{https://www.facebook.com/primarymathspaper/posts/2278450288879217\ul0\cf0}}}}\f0\fs10 "\cf1 ;\line                         \cf2 Uri uriUrl = Uri.\i parse\i0 (url)\cf1 ;\line                         \cf2 Intent launchBrowser = \cf1 new \cf2 Intent(Intent.\cf3\i ACTION_VIEW\cf1\i0 , \cf2 uriUrl)\cf1 ;\line                         \cf2 startActivity(launchBrowser)\cf1 ;\line                     \cf2\}\line                 \}\line             \}\line         \}\cf1 ;\line         \cf3 OkButton\cf2 .setOnClickListener(buttonListener)\cf1 ;\line         \cf3 restartButton\cf2 .setOnClickListener(buttonListener)\cf1 ;\line         \cf3 responseView\cf2 .setOnClickListener(buttonListener)\cf1 ;\line         for \cf2 (\cf1 int \cf2 i=\cf4 0\cf1 ; \cf2 i< \cf3\i BUTTON_IDS\cf2\i0 .\cf3 length \cf2 - \cf4 2\cf1 ; \cf2 i++) \{\line             ImageView button = (ImageView) findViewById(\cf3\i BUTTON_IDS\cf2\i0 [i])\cf1 ;\line             \cf2 button.setOnClickListener(buttonListener)\cf1 ; \cf5 // maybe\line             \cf1 if \cf2 (i < \cf4 4\cf2 )\{\line                 \cf3 buttonsMC\cf2 [i] = button\cf1 ;\line                 \cf3 MCButtonColor\cf2 [i] = (LinearLayout) findViewById(\cf3\i MCColorID\cf2\i0 [i])\cf1 ;\line             \cf2\}\line         \}\line         \cf1 for \cf2 (\cf1 int \cf2 buttonID : \cf3\i BUTTON_Square\cf2\i0 ) \{\line             View button = (View) findViewById(buttonID)\cf1 ;\line             \cf2 button.setOnClickListener(buttonListener)\cf1 ; \cf5 // maybe\line         \cf2\}\line         \cf1 for \cf2 (\cf1 int \cf2 i=\cf4 0\cf1 ; \cf2 i<\cf3\i BUTTON_Wooden\cf2\i0 .\cf3 length\cf1 ; \cf2 i++) \{\line             TextView button = (TextView) findViewById(\cf3\i BUTTON_Wooden\cf2\i0 [i])\cf1 ;\line             \cf2 button.setOnClickListener(buttonListener)\cf1 ; \cf5 // maybe\line             \cf3 woodenNumber\cf2 [i] = button\cf1 ;\line         \cf2\}\line         SetText()\cf1 ; \cf5 //setup all text and image for next question\line     \cf2\}\line\line     \cf5 //Actions of buttonMC, Okbutton, Restart button\line     \cf1 void \cf8 Buttons\cf2 ()\{\line         \cf3 labelTag \cf2 = \cf3 buttonIndex\cf1 ;\line         if \cf2 (\cf3 labelTag \cf2 == \cf4 5\cf2 ) \{ \cf5 //Restart button\line             \cf2 startAgain()\cf1 ;\line         \cf2\}\line         \cf5 //fill in blank format. when ok button is pressed, check answer\line         \cf1 if \cf2 (\cf3 ansFormat \cf2 == \cf4 1\cf2 ) \{ \cf5 //fill in blank\line             \cf1 if \cf2 (\cf3 labelTag \cf2 == \cf4 4\cf2 ) \{ \cf5 //Okbutton\line                 \cf1 if \cf2 (\cf3 answered \cf2 == \cf4 0\cf2 ) \{ \cf5 //have not answered yet\line                     \cf1 if \cf2 (\cf3 questCount \cf2 != \cf3 pagePassword\cf2 ) \{ \cf5 //other than password page\line                         \cf2 answeringAction()\cf1 ;\line                     \cf2\}\line                     checkBlank()\cf1 ; \cf5 //check answer, also password\line                 \cf2\}\line                 \cf1 else \cf2\{ \cf5 //have answered already\line                     \cf1 if \cf2 (\cf3 questCount \cf2 == \cf3 pagePassword\cf2 ) \{\line                         okPassword()\cf1 ; \cf5 //press Okbutton on password page\line                     \cf2\}\line                     \cf1 else \cf2\{\line                         okButton()\cf1 ; \cf5 //press Okbutton on other pages\line                     \cf2\}\line                     \cf3 answered \cf2 = \cf4 0\cf1 ; \cf5 //set to unanswered\line                     \cf3 OkButton\cf2 .setText(\cf6 "\f1\'bd\'54\'a9\'77\f0 "\cf2 )\cf1 ; \cf5 //display it again\line                     \cf3 OkButton\cf2 .setTextColor(\cf4 0xff000000\cf2 )\cf1 ; \cf5 //set text color to black\line                 \cf2\}\line             \}\line         \}\line         \cf5 //MC format\line         \cf1 else if \cf2 (\cf3 ansFormat \cf2 == \cf4 0\cf2 ) \{ \cf5 //MC\line             //if year == savedYear || year == savedYear + 1 && month <= savedMonth \{\line             //if unanswered, response to MC answer before the last conclusion page\line             \cf1 if \cf2 (\cf3 answered \cf2 == \cf4 0 \cf2 && \cf3 labelTag \cf2 < \cf4 4 \cf2 && \cf3 questCount \cf2 < \cf3\i totalQuest\cf2\i0 ) \{\line                 \cf3 answered \cf2 = \cf4 1\cf1 ; \cf5 //set it to having answered already\line                 \cf2 answeringAction()\cf1 ;\line                 \cf2 pressAnswer()\cf1 ;\line             \cf2\}\line             \cf5 //if answered, press okButton to next quest or subquest before the last conclusion page\line             \cf1 else if \cf2 (\cf3 answered \cf2 == \cf4 1 \cf2 && \cf3 labelTag \cf2 == \cf4 4 \cf2 && \cf3 questCount \cf2 < \cf3\i totalQuest\cf2\i0 ) \{\line                 \cf3 answered \cf2 = \cf4 0\cf1 ;\line                 \cf2 okButton()\cf1 ;\line             \cf2\}\line             \cf1 else \cf2\{\}\line\line         \cf5 /*else \{\line             for i in 1 ... 15 \{\line                 label[i].latex = ""\}\line             label[1].latex = "\f1\'a4\'77\'b8\'67\'b9\'4c\'a4\'46\'a4\'40\'a6\'7e\'b4\'c1\'ad\'ad\'a1\'43\f0 "\line         \}*/\line         \cf2\}\line\line     \}\line\line\line     \cf5 //actions for numbers are pressed at fill in the blank\line     \cf1 void \cf8 Square\cf2 ()\{\line         \cf5 //action only at fill in the blank\line         \cf1 if \cf2 (\cf3 ansFormat \cf2 == \cf4 1 \cf2 && \cf3 answered \cf2 == \cf4 0\cf2 )\{\line             \cf5 //which view is pressed?\line             \cf3 viewTag \cf2 = \cf3 buttonIndex\cf1 ;\line             \cf5 //action when 0-9 is pressed and fraction wooden is chosen and not 3 digits yet\line             \cf1 if \cf2 (\cf3 woodenChosen \cf2 < \cf4 3 \cf2 && \cf3 woodenChosen \cf2 > -\cf4 1 \cf2 && dataBase.\cf3\i nonFraction\cf2\i0 [\cf3 questCount\cf2 ] == \cf4 0 \cf2 && \cf3 viewTag \cf2 < \cf4 10\cf2 )\{\line                 \cf1 if \cf2 (\cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ] < \cf4 100\cf2 ) \{\line                     \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ] = \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ] * \cf4 10 \cf2 + \cf3 viewTag\cf1 ;\line                     \cf5 //not display 0 in any part of fraction\line                     \cf1 if \cf2 (\cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ] == \cf4 0\cf2 ) \{\line                         \cf3 woodenNumber\cf2 [\cf3 woodenChosen\cf2 ].setText(\cf6 ""\cf2 )\cf1 ;\line                     \cf2\}\line                     \cf1 else \cf2\{\line                         \cf5 //display whole number only without decimal\line                         \cf3 woodenNumber\cf2 [\cf3 woodenChosen\cf2 ].setText(String.\i format\i0 (\cf6 "%.0f"\cf1 , \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ]))\cf1 ;\line                     \cf2\}\line                 \}\line             \}\line             \cf5 //when the answer is not a fraction and 0-9 is chosen\line             \cf1 else if \cf2 (\cf3 woodenChosen \cf2 == \cf4 0 \cf2 && dataBase.\cf3\i nonFraction\cf2\i0 [\cf3 questCount\cf2 ] == \cf4 1 \cf2 && \cf3 viewTag \cf2 < \cf4 11\cf2 ) \{\line                 \cf5 //add digit when fewer than 6 digits\line                 \cf1 if \cf2 (\cf3 woodenWholeDigit \cf2 < \cf4 5\cf2 ) \{\line                     \cf5 //add decimal\line                     \cf1 if \cf2 (\cf3 viewTag \cf2 == \cf4 10\cf2 ) \{ \cf5 // viewTag == 10 for "."\line                         //add decimal only when there is none\line                         \cf1 if \cf2 (\cf3 woodenWholeDecNum \cf2 == -\cf4 1\cf2 ) \{ \cf5 //whole number without decimal\line                             \cf3 woodenWholeDecNum \cf2 = \cf4 0\cf1 ; \cf5 //whole number with "."\line                             //no digit when whole number is 0, so it counts 1 digit when it is a decimal\line                             \cf1 if \cf2 (\cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ] == \cf4 0\cf2 ) \{\cf3 woodenWholeDigit \cf2 += \cf4 1\cf1 ;\cf2\}\line                             \cf3 woodenNumber\cf2 [\cf4 0\cf2 ].setText(String.\i format\i0 (\cf6 "%.0f"\cf1 , \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ]) + \cf6 "."\cf2 )\cf1 ;\line                         \cf2\}\line                     \}\line                     \cf5 //add number\line                     \cf1 else \cf2\{\line                         \cf5 //add whole number\line                         \cf3 woodenWholeDigit \cf2 += \cf4 1\cf1 ;\line                         if \cf2 (\cf3 woodenWholeDecNum \cf2 == -\cf4 1\cf2 ) \{ \cf5 //whole number\line                             \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ] = \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ] * \cf4 10 \cf2 + \cf3 viewTag\cf1 ;\line                                     if \cf2 (\cf3 woodenWholeDigit \cf2 == \cf4 1 \cf2 && \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ] == \cf4 0\cf2 ) \{\cf3 woodenWholeDigit \cf2 -= \cf4 1\cf1 ;\cf2\}\line                             \cf3 woodenNumber\cf2 [\cf3 woodenChosen\cf2 ].setText(String.\i format\i0 (\cf6 "%.0f"\cf1 , \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ]))\cf1 ;\line                         \cf2\}\line                         \cf1 else \cf2\{ \cf5 //add decimal number\line                             \cf3 woodenWholeLastValue \cf2 = \cf3 woodenWholeLastValue \cf2 * \cf4 10\cf1 ;\line                             \cf3 woodenWholeDecNum \cf2 += \cf4 1\cf1 ;\line                             \cf3 woodenValue\cf2 [\cf4 0\cf2 ] += \cf3 viewTag \cf2 / \cf3 woodenWholeLastValue\cf1 ;\line                             \cf2 String Format = \cf6 "%." \cf2 + String.\i valueOf\i0 (\cf3 woodenWholeDecNum\cf2 ) +\cf6 "f"\cf1 ; \cf5 //number of decimal digits\line                             \cf3 woodenNumber\cf2 [\cf3 woodenChosen\cf2 ].setText(String.\i format\i0 (Format\cf1 , \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ]))\cf1 ;\line                         \cf2\}\line                     \}\line                 \}\line             \}\line             \cf5 // when backbutton is pressed and decimal number wooden is chosen\line             \cf1 else if \cf2 (\cf3 viewTag \cf2 == \cf4 11 \cf2 && \cf3 woodenChosen \cf2 == \cf4 0 \cf2 && dataBase.\cf3\i nonFraction\cf2\i0 [\cf3 questCount\cf2 ] ==\cf4 1\cf2 ) \{\line                 \cf5 //back the whole number\line                 \cf1 if \cf2 (\cf3 woodenWholeDecNum \cf2 < \cf4 1\cf2 )\{\line                     \cf3 woodenWholeDecNum \cf2 = -\cf4 1\cf1 ;\line                     \cf3 woodenWholeDigit \cf2 -= \cf4 1\cf1 ;\line                     \cf3 woodenValue\cf2 [\cf4 0\cf2 ] = (Double)Math.\i floor\i0 (\cf3 woodenValue\cf2 [\cf4 0\cf2 ] / \cf4 10\cf2 )\cf1 ;\line                     \cf3 woodenNumber\cf2 [\cf4 0\cf2 ].setText(String.\i format\i0 (\cf6 "%.0f"\cf1 , \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ]))\cf1 ;\line                     if \cf2 (\cf3 woodenValue\cf2 [\cf4 0\cf2 ] == \cf4 0\cf2 ) \{ \cf5 //do not display whole number "0"\line                         \cf3 woodenNumber\cf2 [\cf4 0\cf2 ].setText(\cf6 ""\cf2 )\cf1 ;\line                         \cf3 woodenWholeDigit \cf2 = \cf4 0\cf1 ;\line                     \cf2\}\line                 \}\line                 \cf5 //back the decimal number\line                 \cf1 else \cf2\{\line                     \cf3 woodenWholeLastValue \cf2 = \cf3 woodenWholeLastValue \cf2 / \cf4 10\cf1 ;\line                     \cf3 woodenWholeDigit \cf2 -= \cf4 1\cf1 ;\line                     \cf3 woodenWholeDecNum \cf2 -= \cf4 1\cf1 ;\line                     \cf3 woodenValue\cf2 [\cf4 0\cf2 ] = (Double) (Math.\i floor\i0 (\cf3 woodenValue\cf2 [\cf4 0\cf2 ] * \cf3 woodenWholeLastValue\cf2 ) / \cf3 woodenWholeLastValue\cf2 )\cf1 ;\line                     \cf2 String Format = \cf6 "%." \cf2 + String.\i valueOf\i0 (\cf3 woodenWholeDecNum\cf2 ) +\cf6 "f"\cf1 ; \cf5 //number of decimal digit\line                     \cf3 woodenNumber\cf2 [\cf3 woodenChosen\cf2 ].setText(String.\i format\i0 (Format\cf1 , \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ]))\cf1 ;\line                     if \cf2 (\cf3 woodenWholeDecNum \cf2 == \cf4 0\cf2 ) \{\line                         \cf3 woodenWholeDecNum \cf2 = -\cf4 1\cf1 ; \cf5 //become a whole number\line                     \cf2\}\line                 \}\line             \}\line             \cf5 //back the 3 numbers of fraction\line             \cf1 else if \cf2 (\cf3 viewTag \cf2 == \cf4 11 \cf2 && \cf3 woodenChosen \cf2 < \cf4 3 \cf2 && \cf3 woodenChosen \cf2 > -\cf4 1 \cf2 )\{\line                 \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ] = (Double)Math.\i floor\i0 (\cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ] / \cf4 10\cf2 )\cf1 ;\line                 \cf5 //not display 0 in any part of fraction\line                 \cf1 if \cf2 (\cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ] == \cf4 0\cf2 ) \{\line                     \cf3 woodenNumber\cf2 [\cf3 woodenChosen\cf2 ].setText(\cf6 ""\cf2 )\cf1 ;\line                 \cf2\}\line                 \cf1 else \cf2\{ \cf5 //whole number without decimal\line                     \cf3 woodenNumber\cf2 [\cf3 woodenChosen\cf2 ].setText(String.\i format\i0 (\cf6 "%.0f"\cf1 , \cf3 woodenValue\cf2 [\cf3 woodenChosen\cf2 ]))\cf1 ;\line                 \cf2\}\line             \}\line         \}\line     \}\line\line     \cf1 void \cf8 Wooden\cf2 ()\{\line         \cf3 woodenChosen \cf2 = \cf3 buttonIndex\cf1 ;\line         \cf5 //set the chosen wood brighter\line         \cf1 for \cf2 (\cf1 int \cf2 i = \cf4 0\cf1 ; \cf2 i < \cf4 3\cf1 ; \cf2 i++) \{\line             \cf3 woodenNumber\cf2 [i].setBackgroundColor(\cf4 0x00FFFFFF\cf2 )\cf1 ; \cf5 // wooden textView background transparent\line         \cf2\}\line         \cf3 woodenNumber\cf2 [\cf3 woodenChosen\cf2 ].setBackgroundColor(\cf4 0x66FFFFFF\cf2 )\cf1 ; \cf5 //chosen textView background brighter with white color\line     \cf2\}\line\line     \cf1 void \cf8 startAgain\cf2 ()\{ \cf5 //Restart the app to the first question\line         \cf3 click\cf2 .start()\cf1 ;\line         \cf5 //reset all counting variables\line         \cf3 questCount \cf2 = \cf4 0\cf1 ;\line         \cf3 questSubcount \cf2 = \cf4 0\cf1 ;\line         \cf3 falseInSubQuest \cf2 = \cf4 0\cf1 ;\line         \cf3 thisIsCorrect \cf2 = \cf4 0\cf1 ;\line         \cf3 answered \cf2 = \cf4 0\cf1 ;\line         \cf3 OkButton\cf2 .setTextColor(\cf4 0x00000000\cf2 )\cf1 ; \cf5 //no text displayed on Okbutton\line         \cf3 currentScore \cf2 = \cf4 0\cf1 ;\line         for \cf2 (\cf1 int \cf2 i = \cf4 0\cf1 ; \cf2 i < \cf4 3\cf1 ; \cf2 i++)\{\line             \cf3 woodenNumber\cf2 [i].setText(\cf6 ""\cf2 )\cf1 ; \cf5 //clear 3 wooden boards\line             \cf3 woodenValue\cf2 [i] = \cf4 0.0\cf1 ;\line             \cf3 score\cf2 [i].setText(\cf6 "0"\cf2 )\cf1 ; \cf5 //reset the score to 0\line         \cf2\}\line         \cf3 woodenWholeLastValue \cf2 = \cf4 1\cf1 ;\line         \cf3 woodenWholeDecNum \cf2 = -\cf4 1\cf1 ;\line         \cf3 woodenWholeDigit \cf2 = \cf4 0\cf1 ;\line         \cf2 SetText()\cf1 ; \cf5 //set the text and image for the first question\line     \cf2\}\line\line     \cf1 void \cf8 answeringAction\cf2 ()\{ \cf5 //actions for user answers\line         \cf3 ding\cf2 .start()\cf1 ; \cf5 //ding sound and shining star get the attention of user\line         \cf3 shiningStar2\cf2 .setVisibility(View.\cf3\i VISIBLE\cf2\i0 )\cf1 ;\line         \cf2 Animation star2Animation = AnimationUtils.\i loadAnimation\i0 (getApplicationContext()\cf1 , \cf2 R.anim.\cf3\i staranim\cf2\i0 )\cf1 ;\line         \cf3 shiningStar2\cf2 .startAnimation(star2Animation)\cf1 ;\line         \cf3 shiningStar2\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ;\line     \cf2\}\line\line     \cf1 void \cf8 checkBlank\cf2 ()\{ \cf5 //check the answer of fill in blank\line         \cf1 if \cf2 (\cf3 questCount \cf2 == \cf3 pagePassword\cf2 ) \{ \cf5 //password page\line             \cf3 answered \cf2 = \cf4 1\cf1 ;\line             \cf3 thisIsCorrect \cf2 = \cf4 0\cf1 ;\line             \cf3 OkButton\cf2 .setText(\cf6 "\f1\'b1\'4b\'bd\'58\'a4\'a3\'a5\'bf\'bd\'54\f0 "\cf2 )\cf1 ; \cf5 //default is incorrect\line\line             \cf1 if \cf2 (\cf3 woodenValue\cf2 [\cf4 0\cf2 ] == \cf3 password\cf2 ) \{ \cf5 //whole number board gets correct password\line                 \cf3 thisIsCorrect \cf2 = \cf4 1\cf1 ;\line                 \cf3 OkButton\cf2 .setText(\cf6 "\f1\'a4\'55\'a4\'40\'c3\'44\f0 "\cf2 )\cf1 ;\line             \cf2\}\line         \}\line         \cf1 else \cf2\{\line             \cf3 answered \cf2 = \cf4 1\cf1 ; \cf5 //pages other than password page\line             \cf3 thisIsCorrect \cf2 = \cf4 0\cf1 ;\line             \cf3 OkButton\cf2 .setText(\cf6 "\f1\'a6\'41\'ba\'e2\'a4\'40\'ba\'e2\f0 "\cf2 )\cf1 ; \cf5 // default is incorrect\line             //default is the last one of 4 responses\line             \cf3 responseView\cf2 .setImageResource(dataBase.\cf3\i responseView\cf2\i0 [\cf3 questCount\cf2 ][\cf3 questSubcount\cf2 ][\cf4 3\cf2 ])\cf1 ;\line             for \cf2 (\cf1 int \cf2 i = \cf4 0\cf1 ; \cf2 i < \cf4 4 \cf1 ; \cf2 i++ ) \{ \cf5 //check it equals to 1 of 4 responses\line                 \cf1 if \cf2 (Arrays.\i equals\i0 (\cf3 woodenValue\cf1 , \cf2 dataBase.\cf3\i blankAnswer\cf2\i0 [\cf3 questCount\cf2 ][\cf3 questSubcount\cf2 ][i])) \{\line                     \cf5 //set its corresponding response\line                     \cf3 responseView\cf2 .setImageResource(dataBase.\cf3\i responseView\cf2\i0 [\cf3 questCount\cf2 ][\cf3 questSubcount\cf2 ][i])\cf1 ;\line                     \cf5 //check if it is correct\line                     \cf1 if \cf2 (i == dataBase.\cf3\i correct\cf2\i0 [\cf3 questCount\cf2 ][\cf3 questSubcount\cf2 ]) \{\line                         \cf3 thisIsCorrect \cf2 = \cf4 1\cf1 ;\line                         \cf3 OkButton\cf2 .setText(\cf6 "\f1\'a4\'55\'a4\'40\'c3\'44\f0 "\cf2 )\cf1 ;\line                     \cf2\}\line                 \cf3 responsePlayer \cf2 = MediaPlayer.\i create\i0 (getApplicationContext()\cf1 , \cf2 dataBase.\cf3\i audioFile\cf2\i0 [\cf3 questCount\cf2 ][\cf3 questSubcount\cf2 ][i])\cf1 ;\line                 \cf3 responsePlayer\cf2 .start()\cf1 ;\line                 \cf2\}\line\line             \}\line             \cf3 falseInSubQuest \cf2 += (\cf4 1 \cf2 - \cf3 thisIsCorrect\cf2 )\cf1 ; \cf5 //falseInSubQuest plus 1 when it is wrong\line         \cf2\}\line\line     \}\line\line     \cf1 void \cf8 okPassword\cf2 ()\{ \cf5 //press ok button on password page\line         \cf3 click\cf2 .start()\cf1 ;\line         if \cf2 (\cf3 labelTag \cf2 == \cf4 4\cf2 ) \{ \cf5 //ok button\line             \cf1 if \cf2 (\cf3 thisIsCorrect \cf2 == \cf4 1\cf2 ) \{ \cf5 //correct password\line                 \cf3 thisIsCorrect \cf2 = \cf4 0\cf1 ; \cf5 //set default for next question\line                 \cf1 for \cf2 (\cf1 int \cf2 i = \cf4 0\cf1 ; \cf2 i < \cf4 3\cf1 ; \cf2 i++)\{ \cf5 //reset wooden board\line                     \cf3 woodenNumber\cf2 [i].setText(\cf6 ""\cf2 )\cf1 ;\line                     \cf3 woodenValue\cf2 [i] = \cf4 0.0\cf1 ;\line                 \cf2\}\line                 \cf5 //reset variables for next page\line                 \cf3 woodenWholeLastValue \cf2 = \cf4 1\cf1 ;\line                 \cf3 woodenWholeDecNum \cf2 = -\cf4 1\cf1 ;\line                 \cf3 woodenWholeDigit \cf2 = \cf4 0\cf1 ;\line                 \cf3 woodenWholeLastValue \cf2 = \cf4 1\cf1 ;\line                 \cf3 woodenWholeDecNum \cf2 = -\cf4 1\cf1 ;\line                 \cf3 woodenWholeDigit \cf2 = \cf4 0\cf1 ;\line                 \cf3 questCount \cf2 += \cf4 1\cf1 ;\line                 \cf3 questSubcount \cf2 = \cf4 0\cf1 ;\line                 \cf3 falseInSubQuest \cf2 = \cf4 0\cf1 ;\line                 \cf3 shiningStar1\cf2 .setVisibility(View.\cf3\i VISIBLE\cf2\i0 )\cf1 ;\line                 \cf2 Animation starAnimation = AnimationUtils.\i loadAnimation\i0 (getApplicationContext()\cf1 , \cf2 R.anim.\cf3\i staranim\cf2\i0 )\cf1 ;\line                 \cf3 shiningStar1\cf2 .startAnimation(starAnimation)\cf1 ;\line                 \cf3 shiningStar1\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ;\line                 \cf2 SetText()\cf1 ;\line             \cf2\}\line             \cf1 else \cf2\{ \cf5 //incorrect password\line                 \cf3 click\cf2 .start()\cf1 ;\line                 if \cf2 (\cf3 ansFormat \cf2 == \cf4 1\cf2 ) \{\line                     \cf1 for \cf2 (\cf1 int \cf2 i = \cf4 0\cf1 ; \cf2 i < \cf4 3\cf1 ; \cf2 i++)\{ \cf5 //reset the wooden board for inputting password again\line                         \cf3 woodenNumber\cf2 [i].setText(\cf6 ""\cf2 )\cf1 ;\line                         \cf3 woodenValue\cf2 [i] = \cf4 0.0\cf1 ;\line                     \cf2\}\line                     \cf5 //reset variables about wooden board\line                     \cf3 woodenWholeLastValue \cf2 = \cf4 1\cf1 ;\line                     \cf3 woodenWholeDecNum \cf2 = -\cf4 1\cf1 ;\line                     \cf3 woodenWholeDigit \cf2 = \cf4 0\cf1 ;\line                 \cf2\}\line             \}\line         \}\line\line     \}\line\line     \cf1 void \cf8 okButton\cf2 ()\{ \cf5 //press ok button on pages other than password page\line         \cf3 click\cf2 .start()\cf1 ;\line         \cf3 textGood\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ; \cf5 //set last animation to invisible\line         \cf3 textTry\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ; \cf5 //set last animation to invisible\line         //if okButton is pressed\line         \cf1 if \cf2 (\cf3 labelTag \cf2 == \cf4 4\cf2 ) \{\line             \cf3 OkButton\cf2 .setTextColor(\cf4 0x00000000\cf2 )\cf1 ; \cf5 //set "OK" to transparent\line             \cf3 responsePlayer\cf2 .stop()\cf1 ;\line             if \cf2 (\cf3 thisIsCorrect \cf2 == \cf4 1\cf2 ) \{ \cf5 //correct answer\line                 \cf3 chimes\cf2 .start()\cf1 ; \cf5 //for celebration\line                 \cf3 textGood\cf2 .setVisibility(View.\cf3\i VISIBLE\cf2\i0 )\cf1 ; \cf5 //"Good" animation\line                 \cf2 Animation textGoodAnimation = AnimationUtils.\i loadAnimation\i0 (getApplicationContext()\cf1 , \cf2 R.anim.\cf3\i textgoodanim\cf2\i0 )\cf1 ;\line                 \cf3 textGood\cf2 .startAnimation(textGoodAnimation)\cf1 ;\line                 \cf3 textGood\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ; \cf5 //set it to invisible after animation completes\line                 \cf3 ding\cf2 .start()\cf1 ;\line                 \cf3 oldScore\cf2 [\cf4 0\cf2 ] = (\cf1 int\cf2 )Math.\i floor\i0 (\cf3 currentScore \cf2 / \cf4 100\cf2 )\cf1 ; \cf5 //"Hundreds" before adding marks\line                 \cf3 oldScore\cf2 [\cf4 1\cf2 ] = (\cf1 int\cf2 )Math.\i floor\i0 (\cf3 currentScore \cf2 / \cf4 10\cf2 ) - \cf3 oldScore\cf2 [\cf4 0\cf2 ] * \cf4 10\cf1 ; \cf5 //"Tens"\line                 \cf3 oldScore\cf2 [\cf4 2\cf2 ] = \cf3 currentScore \cf2 - \cf3 oldScore\cf2 [\cf4 0\cf2 ] * \cf4 100 \cf2 - \cf3 oldScore\cf2 [\cf4 1\cf2 ] * \cf4 10\cf1 ; \cf5 //"Units"\line                 \cf1 if \cf2 (\cf3 falseInSubQuest \cf2 > \cf4 3\cf2 ) \{\cf3 falseInSubQuest \cf2 = \cf4 3\cf1 ;\cf2\} \cf5 //maximum number of false counted\line                 \cf3 currentScore \cf2 = \cf3 currentScore \cf2 + \cf4 16 \cf2 - \cf3 falseInSubQuest \cf2 * \cf4 4\cf1 ; \cf5 //add marks. Max:16\line                 \cf1 if \cf2 (\cf3 questSubcount \cf2 == \cf4 1 \cf2 || \cf3 falseInSubQuest \cf2 == \cf4 0\cf2 ) \{ \cf5 //correct on 2nd subQuestion or 1st attempt\line                     // next Question\line                     \cf3 currentScore \cf2 = \cf3 currentScore \cf2 + \cf4 16 \cf2 * (\cf4 1 \cf2 - \cf3 questSubcount\cf2 )\cf1 ;\line                     \cf3 questCount \cf2 += \cf4 1\cf1 ;\line                     \cf3 questSubcount \cf2 = \cf4 0\cf1 ;\line                 \cf2\}\line                 \cf1 else \cf2\{\line                     \cf5 // next subQuestion\line                     \cf3 questSubcount \cf2 += \cf4 1\cf1 ;\line                 \cf2\}\line                 \cf3 newScore\cf2 [\cf4 0\cf2 ] = (\cf1 int\cf2 )(\cf3 currentScore \cf2 / \cf4 100\cf2 )\cf1 ; \cf5 //"Hundreds" of new score\line                 \cf3 newScore\cf2 [\cf4 1\cf2 ] = (\cf1 int\cf2 )Math.\i floor\i0 (\cf3 currentScore \cf2 / \cf4 10\cf2 ) - \cf3 newScore\cf2 [\cf4 0\cf2 ] * \cf4 10\cf1 ; \cf5 //"Tens"\line                 \cf3 newScore\cf2 [\cf4 2\cf2 ] = \cf3 currentScore \cf2 - \cf3 newScore\cf2 [\cf4 0\cf2 ] * \cf4 100 \cf2 - \cf3 newScore\cf2 [\cf4 1\cf2 ] * \cf4 10\cf1 ; \cf5 //"Tens"\line                 \cf3 maxCount \cf2 = \cf3 newScore\cf2 [\cf4 2\cf2 ]\cf1 ; \cf5 //add "Units" to new score first\line                 \cf3 currentCount \cf2 = \cf3 oldScore\cf2 [\cf4 2\cf2 ] * \cf4 10\cf1 ; \cf5 //to avoid missing time interval by cutting into 10 small intervals\line                 \cf3 digit \cf2 = \cf4 0\cf1 ;\line                 \cf3 Continue \cf2 = \cf1 true; \cf5 //After the timer starts, continue the job\line                 \cf3 periodicUpdate \cf2 = \cf1 new \cf2 Runnable () \{\line\line                     \cf7 @Override\line                     \cf1 public void \cf8 run\cf2 () \{\line                         \cf1 if \cf2 (\cf3 Continue \cf2 == \cf1 true\cf2 ) \{\line                             \cf5 // scheduled event in handler\line                             \cf2 updateLabel()\cf1 ;\line                             \cf3 handler\cf2 .postDelayed(\cf3 periodicUpdate\cf1 , \cf4 25\cf2 )\cf1 ; \cf5 //repeat the handler\line                         \cf2\}\line                     \}\line                 \}\cf1 ;\line                 \cf3 handler\cf2 .postDelayed(\cf3 periodicUpdate\cf1 , \cf4 0\cf2 )\cf1 ; \cf5 //start the handler\line\line                 //self.updateTimer = Timer.scheduledTimer(timeInterval: 0.05, target: self, selector: #selector(ViewController.updateLabel), userInfo: nil, repeats: true)\line\line                 //reset variables for next subQuestion\line                 \cf3 falseInSubQuest \cf2 = \cf4 0\cf1 ;\line                 \cf3 thisIsCorrect \cf2 = \cf4 0\cf1 ;\line                 \cf3 woodenWholeLastValue \cf2 = \cf4 1\cf1 ;\line                 \cf3 woodenWholeDecNum \cf2 = -\cf4 1\cf1 ;\line                 \cf3 woodenWholeDigit \cf2 = \cf4 0\cf1 ;\line                 for \cf2 (\cf1 int \cf2 i = \cf4 0\cf1 ; \cf2 i < \cf4 3\cf1 ; \cf2 i++) \{\line                     \cf3 woodenValue\cf2 [i] = \cf4 0.0\cf1 ;\line                     \cf3 woodenNumber\cf2 [i].setText(\cf6 ""\cf2 )\cf1 ;\line                 \cf2\}\line                 \cf1 if \cf2 (\cf3 questCount \cf2 != \cf3 pagePassword\cf2 ) \{ \cf5 //shining star to attract the user on pages other than password page\line                     \cf3 shiningStar1\cf2 .setVisibility(View.\cf3\i VISIBLE\cf2\i0 )\cf1 ;\line                     \cf2 Animation starAnimation = AnimationUtils.\i loadAnimation\i0 (getApplicationContext()\cf1 , \cf2 R.anim.\cf3\i staranim\cf2\i0 )\cf1 ;\line                     \cf3 shiningStar1\cf2 .startAnimation(starAnimation)\cf1 ;\line                     \cf3 shiningStar1\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ;\line                 \cf2\}\line                 SetText()\cf1 ;\line             \cf2\}\line             \cf1 else \cf2\{ \cf5 //incorrect answer\line                 \cf3 click\cf2 .start()\cf1 ;\line                 if \cf2 (\cf3 ansFormat \cf2 == \cf4 1\cf2 ) \{ \cf5 //fill in blank format\line                     \cf1 for \cf2 (\cf1 int \cf2 i = \cf4 0\cf1 ; \cf2 i < \cf4 3\cf1 ; \cf2 i++) \{\line                         \cf3 woodenValue\cf2 [i] = \cf4 0.0\cf1 ;\line                         \cf3 woodenNumber\cf2 [i].setText(\cf6 ""\cf2 )\cf1 ;\line                     \cf2\}\line                     \cf3 woodenWholeLastValue \cf2 = \cf4 1\cf1 ;\line                     \cf3 woodenWholeDecNum \cf2 = -\cf4 1\cf1 ;\line                     \cf3 woodenWholeDigit \cf2 = \cf4 0\cf1 ;\line                 \cf2\}\line                 \cf3 textTry\cf2 .setVisibility(View.\cf3\i VISIBLE\cf2\i0 )\cf1 ; \cf5 //"Try Again" animation\line                 \cf2 Animation textTryAnimation = AnimationUtils.\i loadAnimation\i0 (getApplicationContext()\cf1 , \cf2 R.anim.\cf3\i texttryanim\cf2\i0 )\cf1 ;\line                 \cf3 textTry\cf2 .startAnimation(textTryAnimation)\cf1 ;\line                 \cf3 textTry\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ;\line             \cf2\}\line         \}\line     \}\line\line     \cf1 void \cf8 pressAnswer\cf2 ()\{ \cf5 //press a button on MC format page\line         \cf3 responseView\cf2 .setImageResource(dataBase.\cf3\i responseView\cf2\i0 [\cf3 questCount\cf2 ][\cf3 questSubcount\cf2 ][\cf3 labelTag\cf2 ])\cf1 ;\line         \cf3 OkButton\cf2 .setTextColor(\cf4 0xFF000000\cf2 )\cf1 ; \cf5 //set "OK" to black\line         \cf1 if \cf2 (\cf3 labelTag \cf2 == dataBase.\cf3\i correct\cf2\i0 [\cf3 questCount\cf2 ][\cf3 questSubcount\cf2 ]) \{ \cf5 //correct answer\line             \cf3 MCButtonColor\cf2 [\cf3 labelTag\cf2 ].setBackgroundResource(R.drawable.\cf3\i bluebutton2\cf2\i0 )\cf1 ;\line             \cf3 OkButton\cf2 .setText(\cf6 "\f1\'a4\'55\'a4\'40\'c3\'44\f0 "\cf2 )\cf1 ;\line             \cf3 thisIsCorrect \cf2 = \cf4 1\cf1 ;\line         \cf2\}\line             \cf1 else \cf2\{ \cf5 //incorrect answer\line             \cf3 MCButtonColor\cf2 [\cf3 labelTag\cf2 ].setBackgroundResource(R.drawable.\cf3\i redbutton2\cf2\i0 )\cf1 ;\line             \cf3 OkButton\cf2 .setText(\cf6 "\f1\'a6\'41\'ba\'e2\'a4\'40\'ba\'e2\f0 "\cf2 )\cf1 ;\line             \cf3 falseInSubQuest \cf2 += \cf4 1\cf1 ;\line             \cf3 thisIsCorrect \cf2 = \cf4 0\cf1 ;\line         \cf2\}\line         \cf3 responsePlayer \cf2 = MediaPlayer.\i create\i0 (getApplicationContext()\cf1 , \cf2 dataBase.\cf3\i audioFile\cf2\i0 [\cf3 questCount\cf2 ][\cf3 questSubcount\cf2 ][\cf3 labelTag\cf2 ])\cf1 ;\line         \cf3 responsePlayer\cf2 .start()\cf1 ;\line     \cf2\}\line\line     \cf1 void \cf8 SetText\cf2 () \{ \cf5 //set images and buttons for next page\line         \cf3 shiningStar1\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ;\line         \cf3 shiningStar2\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ;\line         \cf3 textGood\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ;\line         \cf3 textTry\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ;\line         \cf3 ansFormat \cf2 = dataBase.\cf3\i answerFormat\cf2\i0 [\cf3 questCount\cf2 ]\cf1 ;\line         \cf3 responseView\cf2 .setImageResource(R.drawable.\cf3\i nothing\cf2\i0 )\cf1 ;\line         if \cf2 (\cf3 questCount \cf2 == \cf3 pagePassword\cf2 ) \{\line             \cf3 responseView\cf2 .setImageResource(dataBase.\cf3\i responseView\cf2\i0 [\cf3 pagePassword\cf2 ][\cf4 0\cf2 ][\cf4 0\cf2 ])\cf1 ;\line         \cf2\}\line         \cf1 if \cf2 (\cf3 questCount \cf2 == \cf3\i totalQuest\cf2\i0 ) \{ \cf5 //conclusion page\line             \cf3 responseView\cf2 .setImageResource(dataBase.\cf3\i responseView\cf2\i0 [\cf3\i totalQuest\cf2\i0 ][\cf4 0\cf2 ][\cf4 0\cf2 ])\cf1 ;\line         \cf2\}\line         \cf3 questionView\cf2 .setImageResource(dataBase.\cf3\i questionView\cf2\i0 [\cf3 questCount\cf2 ][\cf3 questSubcount\cf2 ])\cf1 ;\line         if \cf2 (\cf3 ansFormat \cf2 == \cf4 0\cf2 ) \{ \cf5 //MC format\line             //not display the sentence that tells user to press woodboard first\line             \cf3 textID\cf2 .setText(\cf6 "ID=" \cf2 + String.\i valueOf\i0 (\cf3 ID\cf2 ))\cf1 ;\line             \cf3 layoutMC1\cf2 .setVisibility(View.\cf3\i VISIBLE\cf2\i0 )\cf1 ;\line             \cf3 layoutMC2\cf2 .setVisibility(View.\cf3\i VISIBLE\cf2\i0 )\cf1 ;\line             \cf3 layoutWooden\cf2 .setVisibility(View.\cf3\i GONE\cf2\i0 )\cf1 ;\line             \cf3 layoutSquare\cf2 .setVisibility(View.\cf3\i GONE\cf2\i0 )\cf1 ;\line             for \cf2 (\cf1 int \cf2 i = \cf4 0\cf1 ; \cf2 i < \cf4 4\cf1 ; \cf2 i++) \{ \cf5 //MC buttons default color: orange\line                 \cf3 MCButtonColor\cf2 [i].setBackgroundResource(R.drawable.\cf3\i orangebutton2\cf2\i0 )\cf1 ;\line                 \cf3 buttonsMC\cf2 [i].setImageResource(dataBase.\cf3\i answerView\cf2\i0 [\cf3 questCount\cf2 ][\cf3 questSubcount\cf2 ][i])\cf1 ;\line             \cf2\}\line             \cf3 OkButton\cf2 .setTextColor(\cf4 0x00FFFFFF\cf2 )\cf1 ; \cf5 //set "OK" to transparent\line         \cf2\} \cf1 else \cf2\{ \cf5 //fill in blank format\line             //tell user to press the woodboard first\line             \cf3 textID\cf2 .setText(\cf6 "\f1\'bd\'d0\'a5\'fd\'ab\'f6\'a4\'40\'a4\'55\'a4\'ec\'aa\'4f\'a4\'7e\'ab\'f6\'bc\'c6\'a6\'72\'a1\'43\f0        ID=" \cf2 + String.\i valueOf\i0 (\cf3 ID\cf2 ))\cf1 ;\line             \cf3 woodenWholeLastValue \cf2 = \cf4 1\cf1 ;\line             \cf3 woodenWholeDecNum \cf2 = -\cf4 1\cf1 ;\line             \cf3 woodenWholeDigit \cf2 = \cf4 0\cf1 ;\line             \cf3 layoutMC1\cf2 .setVisibility(View.\cf3\i GONE\cf2\i0 )\cf1 ;\line             \cf3 layoutMC2\cf2 .setVisibility(View.\cf3\i GONE\cf2\i0 )\cf1 ;\line             \cf3 layoutWooden\cf2 .setVisibility(View.\cf3\i VISIBLE\cf2\i0 )\cf1 ;\line             \cf3 layoutSquare\cf2 .setVisibility(View.\cf3\i VISIBLE\cf2\i0 )\cf1 ;\line             \cf3 fillInBlank\cf2 .setImageResource(dataBase.\cf3\i answerView\cf2\i0 [\cf3 questCount\cf2 ][\cf3 questSubcount\cf2 ][\cf4 0\cf2 ])\cf1 ;\line             \cf3 OkButton\cf2 .setTextColor(\cf4 0xFF000000\cf2 )\cf1 ; \cf5 //set "OK" to black\line             \cf3 OkButton\cf2 .setText(\cf6 "\f1\'bd\'54\'a9\'77\f0 "\cf2 )\cf1 ;\line             if \cf2 (dataBase.\cf3\i nonFraction\cf2\i0 [\cf3 questCount\cf2 ] == \cf4 1\cf2 ) \{ \cf5 //the answer is not a fraction, it is a decimal\line                 \cf3 decimalView\cf2 .setText(\cf6 "."\cf2 )\cf1 ;\line                 \cf3 layoutFraction\cf2 .setVisibility(View.\cf3\i INVISIBLE\cf2\i0 )\cf1 ; \cf5 //set Numerator and denominator to transparent\line             \cf2\}\line             \cf1 else \cf2\{ \cf5 //the answer is a fraction\line                 \cf3 decimalView\cf2 .setText(\cf6 ""\cf2 )\cf1 ;\line                 \cf3 layoutFraction\cf2 .setVisibility(View.\cf3\i VISIBLE\cf2\i0 )\cf1 ;\line             \cf2\}\line         \}\line     \}\line\line     \cf1 void \cf8 updateLabel\cf2 () \{ \cf5 //adding marks animation\line         \cf3 currentCount \cf2 += \cf4 5\cf1 ; \cf5 //currentCount times 10 to cut the time interval\line         \cf1 if \cf2 (\cf3 currentCount \cf2 > \cf4 95\cf2 ) \{\cf3 currentCount \cf2 = \cf4 0\cf1 ;\cf2\} \cf5 //value added up to 10 then start from 0\line         \cf3 score\cf2 [\cf4 2 \cf2 - \cf3 digit\cf2 ].setText(String.\i valueOf\i0 ((\cf1 int\cf2 )(\cf3 currentCount \cf2 / \cf4 10\cf2 )))\cf1 ;\line         if \cf2 ((\cf3 currentCount \cf2 % \cf4 10\cf2 ) == \cf4 0\cf2 ) \{\cf3 click\cf2 .start()\cf1 ;\cf2\}\line         \cf1 if \cf2 ((\cf1 int\cf2 )(\cf3 currentCount \cf2 / \cf4 10\cf2 ) == \cf3 maxCount\cf2 ) \{ \cf5 //animation of this place completes\line             \cf1 switch \cf2 (\cf3 digit\cf2 ) \{\line                 \cf1 case \cf4 0\cf2 : \cf3 digit \cf2 = \cf4 1\cf1 ; \cf5 //animation moves from digit 0 to digit 1\line                         \cf3 currentCount \cf2 = \cf3 oldScore\cf2 [\cf4 1\cf2 ] * \cf4 10\cf1 ;\line                         \cf3 maxCount \cf2 = \cf3 newScore\cf2 [\cf4 1\cf2 ]\cf1 ;\line                         break;\line                 case \cf4 1\cf2 : \cf3 digit \cf2 = \cf4 2\cf1 ; \cf5 //animation moves from digit 1 to digit 2\line                         \cf3 currentCount \cf2 = \cf3 oldScore\cf2 [\cf4 0\cf2 ] * \cf4 10\cf1 ;\line                         \cf3 maxCount \cf2 = \cf3 newScore\cf2 [\cf4 0\cf2 ]\cf1 ;\line                         break;\line                 case \cf4 2\cf2 : \cf3 Continue \cf2 = \cf1 false; \cf5 //three digits complete, stop the handler\line                         \cf1 break;\line                 default\cf2 :\cf3 digit \cf2 = \cf4 2\cf1 ;\line                         break;\line             \cf2\}\line         \}\line     \}\line\}\line\par

\pard\sa200\sl276\slmult1\cf0\f2\fs22\par
}
 